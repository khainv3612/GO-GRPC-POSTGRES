// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogManageClient is the client API for LogManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogManageClient interface {
	CreateLog(ctx context.Context, in *LogModel, opts ...grpc.CallOption) (*LogModel, error)
	FetchLog(ctx context.Context, in *LogModel, opts ...grpc.CallOption) (LogManage_FetchLogClient, error)
}

type logManageClient struct {
	cc grpc.ClientConnInterface
}

func NewLogManageClient(cc grpc.ClientConnInterface) LogManageClient {
	return &logManageClient{cc}
}

func (c *logManageClient) CreateLog(ctx context.Context, in *LogModel, opts ...grpc.CallOption) (*LogModel, error) {
	out := new(LogModel)
	err := c.cc.Invoke(ctx, "/proto.LogManage/CreateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logManageClient) FetchLog(ctx context.Context, in *LogModel, opts ...grpc.CallOption) (LogManage_FetchLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogManage_ServiceDesc.Streams[0], "/proto.LogManage/FetchLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logManageFetchLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogManage_FetchLogClient interface {
	Recv() (*LogModel, error)
	grpc.ClientStream
}

type logManageFetchLogClient struct {
	grpc.ClientStream
}

func (x *logManageFetchLogClient) Recv() (*LogModel, error) {
	m := new(LogModel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogManageServer is the server API for LogManage service.
// All implementations must embed UnimplementedLogManageServer
// for forward compatibility
type LogManageServer interface {
	CreateLog(context.Context, *LogModel) (*LogModel, error)
	FetchLog(*LogModel, LogManage_FetchLogServer) error
	//mustEmbedUnimplementedLogManageServer()
}

// UnimplementedLogManageServer must be embedded to have forward compatible implementations.
type UnimplementedLogManageServer struct {
}

func (UnimplementedLogManageServer) CreateLog(context.Context, *LogModel) (*LogModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLog not implemented")
}
func (UnimplementedLogManageServer) FetchLog(*LogModel, LogManage_FetchLogServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchLog not implemented")
}
func (UnimplementedLogManageServer) mustEmbedUnimplementedLogManageServer() {}

// UnsafeLogManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogManageServer will
// result in compilation errors.
type UnsafeLogManageServer interface {
	mustEmbedUnimplementedLogManageServer()
}

func RegisterLogManageServer(s grpc.ServiceRegistrar, srv LogManageServer) {
	s.RegisterService(&LogManage_ServiceDesc, srv)
}

func _LogManage_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogManageServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogManage/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogManageServer).CreateLog(ctx, req.(*LogModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogManage_FetchLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogModel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogManageServer).FetchLog(m, &logManageFetchLogServer{stream})
}

type LogManage_FetchLogServer interface {
	Send(*LogModel) error
	grpc.ServerStream
}

type logManageFetchLogServer struct {
	grpc.ServerStream
}

func (x *logManageFetchLogServer) Send(m *LogModel) error {
	return x.ServerStream.SendMsg(m)
}

// LogManage_ServiceDesc is the grpc.ServiceDesc for LogManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogManage",
	HandlerType: (*LogManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLog",
			Handler:    _LogManage_CreateLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchLog",
			Handler:       _LogManage_FetchLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
